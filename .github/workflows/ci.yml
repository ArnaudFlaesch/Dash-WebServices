name: Gradle CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"

    steps:
      - uses: actions/checkout@v5

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Set up JDK 24
        uses: actions/setup-java@v5
        with:
          java-version: "24"
          distribution: "adopt"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Lint
        run: ./gradlew lintKotlin

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Generate OpenAPI docs
        if: success() && github.ref_name == 'master'
        run: |
          docker run --name db -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash_test postgres:16.3-alpine3.20
          ./gradlew generateOpenApiDocs
          docker stop db

      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        if: success() && github.ref_name == 'master'
        with:
          output: swagger-ui
          spec-file: build/openapi.json
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v4
        if: success() && github.ref_name == 'master'
        with:
          path: ./swagger-ui

      - name: Start mock server
        run: |
          [[ "$(git ls-remote --heads https://github.com/ArnaudFlaesch/Dash-MockServer ${{github.ref_name}} | wc -l)" == 1 && ${{github.ref_name}} != 'master' ]] && tagName=${{github.ref_name}} || tagName=latest
          docker run -p 5000:5000 -d ghcr.io/arnaudflaesch/dash-mockserver:$tagName

      - name: Start database image
        run: docker run -p 5432:5432 -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash_test postgres:16.3-alpine3.20

      - name: Build with Gradle
        run: ./gradlew clean assemble koverXmlReport

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Test report
          path: build/reports/tests/test

      - name: Report coverage for Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Report coverage for Codacy
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r build/reports/kover/report.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: SonarCloud Scan
        run: ./gradlew sonar --info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      packages: write

    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set Docker tag for release
        if: github.ref_name == 'master'
        run: echo "DOCKER_TAG_NAME=latest" >> $GITHUB_ENV

      - name: Set Docker tag for test
        if: github.ref_name != 'master' && !contains(github.head_ref, 'renovate/')
        run: echo "DOCKER_TAG_NAME=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV

      - name: Set Docker tag for Renovate branches
        if: github.ref_name != 'master' && contains(github.head_ref, 'renovate/')
        run: echo "DOCKER_TAG_NAME=renovate" >> $GITHUB_ENV

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build Docker image
        run: docker build --tag ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}} .

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Snyk monitor
        uses: snyk/actions/gradle@v1.0.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle@v1.0.0
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-code.sarif

      - name: Upload Snyk code scan result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

      - name: Snyk container monitor
        uses: snyk/actions/docker@v1.0.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}
          args: --file=Dockerfile

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@v1.0.0
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}
          args: --file=Dockerfile

      # Replace any "undefined" security severity values with 0. The undefined value is used in the case
      # of license-related findings, which do not do not indicate a security vulnerability.
      # See https://github.com/github/codeql-action/issues/2187 for more context.
      - name: Post-process sarif output
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk.sarif
          sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk.sarif

      - name: Upload Snyk container scan result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Push container image to registry
        if: success() && !contains(github.ref, 'renovate/')
        run: |
          echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}


  deploy-pages:
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    needs: [ "test" ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-gcp:
    needs: [ "test", "build" ]
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest

    env:
      TAG: europe-docker.pkg.dev/${{ secrets.PROJECT_ID }}/eu.gcr.io/${{ secrets.SERVICE }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v5

      - name: Login to GCP
        id: auth
        uses: 'google-github-actions/auth@v3.0.0'
        with:
          token_format: 'access_token'
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ secrets.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t dash-webservices .
          docker tag dash-webservices ${{ env.TAG }}
          docker push ${{ env.TAG }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v3.0.1
        with:
          service: ${{ secrets.SERVICE }}
          region: ${{ secrets.REGION }}
          image: ${{ env.TAG }}:latest

  codacy-security-scan:
    permissions:
      contents: read
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4.4
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will hand over control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
