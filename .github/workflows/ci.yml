# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Gradle CI

on: [ "push" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 16
        uses: actions/setup-java@v3
        with:
          java-version: "16"
          distribution: "adopt"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Lint
        run: |
          ./gradlew detekt
          ./gradlew ktlintCheck

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Start mock server
        run: |
          if [[ "$(git ls-remote --heads https://github.com/ArnaudFlaesch/Dash-MockServer ${GITHUB_REF#refs/*/} | wc -l)" == 1 && ${GITHUB_REF#refs/*/} != 'master' ]]; then
            docker run -p 5000:5000 -d ghcr.io/arnaudflaesch/dash-mockserver:${GITHUB_REF#refs/*/}
          else
            docker run -p 5000:5000 -d ghcr.io/arnaudflaesch/dash-mockserver:latest
          fi

      - name: Build with Gradle
        run: ./gradlew clean build -Dspring.profiles.active=test -Dspring.config.location=src/test/resources/application-test.properties

      - name: Upload test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test report
          path: build/reports/tests/test

      - name: Report coverage
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Kotlin -r build/reports/jacoco/test/jacocoTestReport.xml --project-token ${{ secrets.CODACY_PROJECT_TOKEN }}
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      packages: write

    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Docker tag for release
        run: |
          echo "DOCKER_TAG_NAME=latest" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/master'

      - name: Set Docker tag for test
        run: |
          echo "DOCKER_TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        if: github.ref != 'refs/heads/master' && !contains(github.ref, 'renovate/')

      - name: Set Docker tag for Renovate branches
        run: |
          echo "DOCKER_TAG_NAME=renovate" >> $GITHUB_ENV
        if: github.ref != 'refs/heads/master' && contains(github.ref, 'renovate/')

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build Docker image
        run: docker build --tag ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}} .

      - uses: snyk/actions/setup@master
        id: snyk

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Snyk monitor
        run: |
          snyk monitor
          snyk container monitor ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk16@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-code.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can sign up for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}
          args: --file=Dockerfile

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Set up JDK 16
        uses: actions/setup-java@v3
        with:
          java-version: "16"
          distribution: "adopt"

      - name: Generate OpenAPI docs
        run: |
          docker run --name db -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=dash_test postgres:13.2-alpine
          ./gradlew generateOpenApiDocs
          docker stop db

      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: swagger-ui
          spec-file: build/openapi.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if : success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: swagger-ui

      - name: Push container image to registry
        if: success() && !contains(github.ref, 'renovate/')
        run: |
          echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ env.REPO }}:${{env.DOCKER_TAG_NAME}}

  codacy-security-scan:
    permissions:
      contents: read
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@85dc0c9de655363a196d924606890e275a9dddd1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will hand over control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif